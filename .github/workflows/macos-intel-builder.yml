# GitHub Actions Workflow for Building macOS (Intel) Executable
#
# Why this workflow exists:
# 1. Automates the build of a macOS .app (or executable) for the Python application on Intel architecture.
# 2. Enables building from any developer environment using GitHub-hosted macOS Intel runners.
# 3. Stores the built application as a downloadable artifact.

name: Build macOS (Intel) Executable

on:
  push:
    branches: [ makingfile ]
  workflow_dispatch:

jobs:
  build-macos-intel:
    name: Build Python App for macOS (Intel)
    runs-on: macos-12 # Uses an Intel-based macOS runner

    env:
      CHROME_ZIP_URL_MACOS_INTEL: "https://storage.googleapis.com/chrome-for-testing-public/137.0.7151.68/mac-x64/chromedriver-mac-x64.zip"
      CHROME_DRIVER_DIR_MACOS_INTEL: "chromedriver-mac-x64" # Directory created after unzipping

    defaults:
      run:
        shell: bash

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Clean workspace
        run: |
          git clean -xdf

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Build React frontend
        run: |
          echo "Building React frontend..."
          cd front-end-react
          npm ci
          npm run build
          echo "React frontend build complete."

      - name: Cache ChromeDriver (macOS Intel)
        id: cache-chromedriver-macos-intel
        uses: actions/cache@v4
        with:
          path: chromedriver-mac-x64.zip
          key: ${{ runner.os }}-chromedriver-intel-${{ env.CHROME_ZIP_URL_MACOS_INTEL }}
          restore-keys: |
            ${{ runner.os }}-chromedriver-intel-

      - name: Download and Set up ChromeDriver (macOS Intel)
        run: |
          echo "Start ChromeDriver Setup (macOS Intel): $(date)"
          if [ "${{ steps.cache-chromedriver-macos-intel.outputs.cache-hit }}" != 'true' ]; then
            echo "Cache miss for ChromeDriver (macOS Intel). Downloading..."
            curl -L -o chromedriver-mac-x64.zip "${{ env.CHROME_ZIP_URL_MACOS_INTEL }}"
          else
            echo "ChromeDriver (macOS Intel) cache hit. Skipping download."
          fi
          unzip -o chromedriver-mac-x64.zip # -o to overwrite without prompting
          CHROMEDRIVER_PATH_FULL="${{ env.GITHUB_WORKSPACE }}/${{ env.CHROME_DRIVER_DIR_MACOS_INTEL }}"
          echo "Adding to PATH: $CHROMEDRIVER_PATH_FULL"
          echo "$CHROMEDRIVER_PATH_FULL" >> $GITHUB_PATH
          # Make chromedriver executable
          chmod +x "${CHROMEDRIVER_PATH_FULL}/chromedriver"
          chromedriver --version
          echo "End ChromeDriver Setup (macOS Intel): $(date)"

      - name: Create venv, Install Deps, and Build with PyInstaller (macOS Intel)
        run: |
          echo "Setting up virtual environment and installing dependencies..."
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r backend-web-scrapper/requirements.txt
          pip install pyinstaller
          echo "Dependencies installed. Starting PyInstaller build..."
          cd backend-web-scrapper
          echo "Listing files in backend-web-scrapper directory:"
          ls -la
          echo "Attempting to build from main.py for macOS Intel..."
          pyinstaller --noconfirm --clean main.py \
            --name web_scraper_backend_macos_intel \
            --console \
            --add-data "log_folder_config.txt:." \
            --add-data "../front-end-react/dist:static_frontend" \
            --add-data "../venv/lib/python3.11/site-packages/selenium_stealth/js:selenium_stealth/js" \
            --hidden-import="asyncio" \
            --hidden-import="logging" \
            --hidden-import="uuid" \
            --hidden-import="pathlib" \
            --hidden-import="pytz" \
            --hidden-import="charset_normalizer" \
            --hidden-import="multipart.exceptions" \
            --hidden-import="json" \
            --hidden-import="uvicorn" \
            --hidden-import="uvicorn.config" \
            --hidden-import="typing_extensions" \
            --hidden-import="pydantic_core" \
            --hidden-import="fastapi" \
            --hidden-import="fastapi.main" \
            --hidden-import="starlette" \
            --hidden-import="starlette.applications" \
            --hidden-import="pydantic" \
            --hidden-import="pandas" \
            --hidden-import="selenium" \
            --hidden-import="selenium.webdriver.common.service" \
            --hidden-import="selenium.webdriver.remote.remote_connection" \
            --hidden-import="selenium.webdriver.chrome.options" \
            --hidden-import="selenium_stealth" \
            --hidden-import="requests" \
            --hidden-import="bs4"
          echo "PyInstaller build finished for macOS Intel."
        # The output (dist folder) will be in backend-web-scrapper/dist/

      - name: Upload macOS (Intel) Application Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web_scraper_macos_intel_app # Name of the artifact
          path: backend-web-scrapper/dist/ # Path to the folder to upload
          if-no-files-found: error
